bool DFS(int** graph,int* graphColSize,int* safe,int* visited,int node){
    bool isSafe=true; //bool value on whether the current node is a safe node
    //visit all neighbours of the current node
    //if any neighbour is not safe, node is not safe, set isSafe=false
    //if all neighbours are safe, node is safe, so isSafe remains true
    //return isSafe
    for(int i=0;i<graphColSize[node];i++){
        int neighbour=graph[node][i];
        //if neighbour is not safe, node is also not safe
        //if neighbour is already visited, a cycle exists, so node is not safe
        if(!safe[neighbour] || visited[neighbour]){
            isSafe=false;
            break;
        }
        //if neighbour is safe, move on to next neighbour
        if(safe[neighbour]==1){
            continue;
        }
        //do dfs traversal on the neighbour to check if neighbour is safe
        visited[neighbour]=1;
        if(DFS(graph,graphColSize,safe,visited,neighbour)==false){
            //neighbour is not safe
            isSafe=false;
            break;
        }
        visited[neighbour]=0;
    }
    safe[node]=isSafe?1:0;
    return isSafe;
}
int* eventualSafeNodes(int** graph, int graphSize, int* graphColSize, int* returnSize) {
    int* safe=malloc(graphSize*sizeof(int));
    int* visited=malloc(graphSize*sizeof(int));
    for(int i=0;i<graphSize;i++){
        safe[i]=-1;//default initial value
        visited[i]=0;//not visited
    }
    //traverse every node and check if safe
    for(int node=0;node<graphSize;node++){
        //do depth first traversal on nodes that have not been traversed yet
        if(safe[node]==-1){
            visited[node]=1;
            DFS(graph,graphColSize,safe,visited,node);
            visited[node]=0;
        }
    }
    //add all safe nodes to return array
    int* returnArray=malloc(graphSize*sizeof(int));
    *returnSize=0;
    for(int node=0;node<graphSize;node++){
        if(safe[node]==1){
            returnArray[(*returnSize)++]=node;
        }
    }
    return returnArray;
}
